/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
 * Generated at: 2019-11-08 04:24:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._99dan;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _99danme_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

		response.setCharacterEncoding("EUC-KR");
		

      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("body{background: #FAFAFA; }\r\n");
      out.write("\n");
      out.write("h1{\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tcolor:#455B71;\r\n");
      out.write("\tfont-size: 100px;\r\n");
      out.write("\t}\r\n");
      out.write("h2{\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tcolor:#455B71;\r\n");
      out.write("\tfonr-size: 40px;\r\n");
      out.write("}\r\n");
      out.write("th{\r\n");
      out.write("  \r\n");
      out.write("\tbackground-color: #BDBDBD;\r\n");
      out.write("\tcolor:#455B71;\r\n");
      out.write("\tpadding: 10px;\t\r\n");
      out.write("\tfont-size: 30;\r\n");
      out.write("\tborder-top-left-radius: 20px;\r\n");
      out.write("\tborder-top-right-radius: 0px;\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("td:hover{background: #B40404;}\r\n");
      out.write("td{\r\n");
      out.write("\tbackground-color: #2E2E2E;\r\n");
      out.write("\tcolor: #E6E0F8;\r\n");
      out.write("\tpadding: 10px;\r\n");
      out.write("\tfont-size: 20;\t\r\n");
      out.write("\tborder-collapse : collapse;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table{\r\n");
      out.write("   \t\r\n");
      out.write("\tmargin-top: auto;\r\n");
      out.write("\tmargin-left: auto;\r\n");
      out.write("\tmargin-right: auto;\r\n");
      out.write("\tborder-collapse : collapse;\r\n");
      out.write("}\r\n");
      out.write("\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<h1 >구구단</h1>\r\n");
      out.write("<h2>2019.11.08</h2>\r\n");
      out.write("\r\n");
      out.write("<table>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t");
for (int i = 2; i <10; i++) {
      out.write("\r\n");
      out.write("\t\t\t<th>");
      out.print(i + " 단");
      out.write("</th>\r\n");
      out.write("\t\t");
}
      out.write("\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t");
for (int i = 1; i < 10; i++) { 
      out.write("\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t");

			for (int j = 2; j <10; j++) {
		
      out.write("\r\n");
      out.write("\t\t<td>");
      out.print(j + " X " + i + " = " + j * i);
      out.write("</td>\r\n");
      out.write("\t\t");
}
      out.write("\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t");
}
      out.write("\r\n");
      out.write("</table>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
