/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
 * Generated at: 2019-11-28 06:55:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.upload;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import upload.UtilMgr;
import upload.FileloadBean;
import java.util.Vector;

public final class flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Vector");
    _jspx_imports_classes.add("upload.UtilMgr");
    _jspx_imports_classes.add("upload.FileloadBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- flist.jsp -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      upload.FileloadMgr mgr = null;
      mgr = (upload.FileloadMgr) _jspx_page_context.getAttribute("mgr", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (mgr == null){
        mgr = new upload.FileloadMgr();
        _jspx_page_context.setAttribute("mgr", mgr, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');

		request.setCharacterEncoding("EUC-KR");
		Vector<FileloadBean> vlist = mgr.listFile();

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function allChk() {\r\n");
      out.write("\tf= document.frm;\r\n");
      out.write("\tif(f.allCh.checked){\r\n");
      out.write("\t\tfor(i=0;i<f.fch.length;i++){\r\n");
      out.write("\t\t\t\t/*항목의 체크버튼(fch)들이 배열이기에*/\r\n");
      out.write("\t\t\tf.fch[i].checked = true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tf.btn.disabled = false;//버튼의 활성화\r\n");
      out.write("\t}else{\r\n");
      out.write("\t\tfor(i=0;i<f.fch.length;i++){\r\n");
      out.write("\t\t\tf.fch[i].checked = false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tf.btn.disabled = true;\t//버튼의 비활성화\t\t\t\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\tfunction chk(){\r\n");
      out.write("\t\tf=document.frm;\r\n");
      out.write("\t\tfor(i=1; i<f.fch.length;i++){\r\n");
      out.write("\t\t\t//alert(f.fch[i].value);\r\n");
      out.write("\t\t\tif(f.fch[i].checked){ //fch 체크박스가 체크가 된 경우\r\n");
      out.write("\t\t\t\tf.btn.disabled = false;\r\n");
      out.write("\t\t\treturn; //밑에 있는 체크박스의 체크 유무는 무의미\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tf.allCh.checked= false; //전체체크박스 해제\r\n");
      out.write("\t\tf.btn.disabled = true; //버튼 비활성화\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t/* 다운로드를 받고자하는 파일명을 클릭하였을 때 \r\n");
      out.write("\t해당하는 파일명을 가지고 downFrm으로 이동 */\r\n");
      out.write("\tfunction downFn(upFile){\r\n");
      out.write("\t\tdf=document.downFrm;\r\n");
      out.write("\t\tdf.upFile.value=upFile;\r\n");
      out.write("\t\tdf.submit();\r\n");
      out.write("\t}\t\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div align=\"center\">\r\n");
      out.write("<h2>File List</h2>\r\n");
      out.write("<form name=\"frm\" action=\"fdeleteProc.jsp\">\r\n");
      out.write("<input type=\"hidden\" name=\"fch\" value=\"0\">\r\n");
      out.write("<!-- 동일한 form에서 두개 이상의 같은 name값이 있어야 배열로 인식이 된다. \r\n");
      out.write("name이 fch인 form이 두개이다, 배열로 인식이 된다.-->\r\n");
      out.write("<table border=\"1\" width=\"300\">\r\n");
      out.write("\t<tr align=\"center\">\r\n");
      out.write("\t\t<td><input type=\"checkbox\" name=\"allCh\" onclick=\"allChk()\"></td>\r\n");
      out.write("\t\t<td>번호</td>\r\n");
      out.write("\t\t<td>파일명</td>\r\n");
      out.write("\t\t<td>파일크기</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t");

	for(int i=0;i<vlist.size();i++){
		FileloadBean bean = vlist.get(i);
		int num = bean.getNum();
		String upFile = bean.getUpFile();
		int size = bean.getSize();
	
      out.write("\r\n");
      out.write("\t<tr align=\"center\">\r\n");
      out.write("\t\t<td><input type=\"checkbox\" name=\"fch\" value=\"");
      out.print(num);
      out.write("\" onclick=\"chk()\"></td>\r\n");
      out.write("\t\t<td>");
      out.print(i+1);
      out.write("</td>\r\n");
      out.write("\t\t<!-- 다운로드 만들기 시작 하이퍼링크를 달아주었다.\r\n");
      out.write("\t\t기능명:downFn 정해주었고 실행되도록 지정하였다.-->\r\n");
      out.write("\t\t<td><a href=\"javascript:downFn('");
      out.print(upFile);
      out.write("')\">\r\n");
      out.write("\t\t");
      out.print(upFile );
      out.write("</a></td>\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<td>");
      out.print(UtilMgr.monFormat(size));
      out.write("byte</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t");
}//---for
      out.write("\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td colspan=\"4\">\r\n");
      out.write("\t\t\t<input type=\"submit\" name=\"btn\" value=\"DELETE\" disabled>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("</table>\r\n");
      out.write("</form><p>\r\n");
      out.write("<a href=\"fupload.jsp\">입력폼</a>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- 다운로드 폼 만들기 downFrm은 fdwonload.jsp로 가게 하였다.-->\r\n");
      out.write("<form name=\"downFrm\" method=\"post\" action=\"fdownload.jsp\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"upFile\">\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
