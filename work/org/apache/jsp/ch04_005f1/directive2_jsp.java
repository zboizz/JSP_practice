/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
 * Generated at: 2019-11-08 02:06:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch04_005f1;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.text.*;
import ch03.MyUtil;

public final class directive2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("ch03.MyUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 16384, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- directive2.jsp -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- import를 할시에 ,를 활용하여 여러가지 클래스를 가져올 수 있다. \r\n");
      out.write("또한 import 중복도 가능하다.-->\r\n");
      out.write("\r\n");

		request.setCharacterEncoding("EUC-KR");
		Date d = new Date();

      out.write("\r\n");
      out.write("\r\n");
      out.write("현재 날짜와 시간은? ");
      out.print(d.toLocaleString());
      out.write("<br/>\r\n");
      out.write("세션Id: ");
      out.print(session.getId());
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("Session은 객체이다.(httpSession)\r\n");
      out.write("최초 브라우저에 접속할때 톰캣에서는 첫방문자인지 기존의 방문자인지 알 수 있다.\r\n");
      out.write("그 이유는 SessionId값이 존재하는데 최초접속할시에는 SessionId값이 없기때문이다.\r\n");
      out.write("\r\n");
      out.write("그래서 최초 접속(요청)시에 SessionID값을 발급해주는데, \r\n");
      out.write("이때 A라는 사람의 Session객체가 톰캣의 서버에 생긴다.\r\n");
      out.write("\r\n");
      out.write("B라는 사람또한 최초 접속시에 객체가 생기고 ID가 부여된다.\r\n");
      out.write("이러한 과정이 '요청'이며 서버가 이 요청에대한 대답이 '응답'이다. \r\n");
      out.write("응답시에는 sessionID값이 서버로부터\r\n");
      out.write("보내어 오는데 이러한 값이 B의 쿠키라는 곳에 저장된다.\r\n");
      out.write("\r\n");
      out.write("두번째 접속시에 B는 쿠키를 들고 서버에 가는데(요청) 이와 같은 정보가 요청시 생겼던\r\n");
      out.write("Session객체에 있는 SesstionID와 비교하여 접속이 확인된다.\r\n");
      out.write("\r\n");
      out.write("이러한 Session객체는 접속유지시간이 길지 않은데\r\n");
      out.write("은행과 같은 사이트는 그 시간이 짧아서 일정시간이 지나면\r\n");
      out.write("재로그인을 해야한다.\r\n");
      out.write("\r\n");
      out.write("default 값이 true이기에 따로 설정할 필요는 없다.\r\n");
      out.write("(session, buffer, autoFlush)\r\n");
      out.write(" -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
