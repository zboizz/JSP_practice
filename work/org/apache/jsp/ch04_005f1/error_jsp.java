/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
 * Generated at: 2019-11-08 06:47:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch04_005f1;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class error_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    java.lang.Throwable exception = org.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);
    if (exception != null) {
      response.setStatus(javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- 에러발생페이지 만들기 -->\r\n");
      out.write("\t\t \r\n");
	
response.setCharacterEncoding("EUC-KR");

      out.write("\r\n");
      out.write("\r\n");
      out.write("다음과 같은 에러가 발생하셨습니다.<br/>\r\n");
      out.print(exception.getMessage());
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("JSP ->예외 -> 디버깅이 뜨는데 이때 코드내용중 DB계정이 노출된다면 큰일이다.\r\n");
      out.write("MVC패턴으로 만들면 이와같은 상황을 예방할 수 있다.\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("**Model: 애플리케이션의 정보, 테이터를 나타냄, 비즈니스 영역의 로직 처리\r\n");
      out.write("         백그라운드에서 동작하는 로직을 처리\r\n");
      out.write("1. 사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 한다.\r\n");
      out.write("2. 뷰나 컨트롤러에 대해서 어떤 정보도 알지 말아야 한다.\r\n");
      out.write("3. 변경이 일어나면, 변경통지에 대한 처리방법을 구현해야만 한다.\r\n");
      out.write("\r\n");
      out.write("**View: input 텍스트, 체크박스 항목등과 같은 사용자 인터페이스 요소를 나타낸다.\r\n");
      out.write("        비즈니스 영역에 대한 뷰를 담당\r\n");
      out.write("        사용자가 보게 될 결과 화면을 출력\r\n");
      out.write("다시말해 데이터 및 객체의 입력, 그리고 보여주는 출력을 담당한다.\r\n");
      out.write("1. 모델이 가지고 있는 정보를 따로 저장해서는 안된다.\r\n");
      out.write("2. 모델이나 컨트롤러와 같이 다른 구성요소들을 몰라야한다.\r\n");
      out.write("3. 변경이 일어나면 변경통지에 대한 처리방법을 구현해야만 한다.\r\n");
      out.write("\r\n");
      out.write("**Controller: 사용자의 입력처리와 흐름 제어를 담당\r\n");
      out.write("              데이터와 사용자인터페이스 요소들을 잇는 다리 역할\r\n");
      out.write("              즉, 사용자가 데이터를  클릭하고, 수정하는 것에 대한 '이벤트'를\r\n");
      out.write("              처리하는 부분을 뜻한다.\r\n");
      out.write("1. 모델이나 뷰에 대해서 알고 있어야 한다.\r\n");
      out.write("2. 모델이나 뷰의 변경을 모니터링 해야 한다.\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("익스플로어는 필요한 최소문장이 있기에 필요한 내용크기만큼 문장을 작성해야 에러페이지가 뜬다.\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
